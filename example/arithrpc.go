// Generated by go-rpcgen. Do not modify.

package example

import (
	"net/rpc"
)

type ArithService struct {
	impl Arith
}

func NewArithService(impl Arith) *ArithService {
	return &ArithService{impl}
}

func RegisterArithService(server *rpc.Server, impl Arith) error {
	return server.RegisterName("Arith", NewArithService(impl))
}

type ArithAddRequest struct {
	A, B int
}

type ArithAddResponse struct {
	Result int
}

func (s *ArithService) Add(request *ArithAddRequest, response *ArithAddResponse) (err error) {
	response.Result, err = s.impl.Add(request.A, request.B)
	return
}

type ArithClient struct {
	client *rpc.Client
}

func DialArithClient(addr string) (*ArithClient, error) {
	client, err := rpc.Dial("tcp", addr)
	return &ArithClient{client}, err
}

func NewArithClient(client *rpc.Client) *ArithClient {
	return &ArithClient{client}
}

func (_c *ArithClient) Close() error {
	return _c.client.Close()
}

func (_c *ArithClient) Add(a, b int) (result int, err error) {
	_request := &ArithAddRequest{a, b}
	_response := &ArithAddResponse{}
	err = _c.client.Call("Arith.Add", _request, _response)
	return _response.Result, err
}
